package bomberman.model.game;

import bomberman.model.profile.PlayerProfile;
import bomberman.model.profile.PlayerProfileManager;
import bomberman.model.ai.AIPlayer;
import bomberman.model.entities.GamePlayer;

import java.util.ArrayList;
import java.util.List;

/**
 * Gestionnaire principal de la logique de jeu Bomberman.
 * Cette classe centralise et orchestre tous les aspects du gameplay :
 * gestion des joueurs, syst√®mes de bombes et power-ups, d√©tection des collisions,
 * conditions de victoire et int√©gration avec les profils joueurs. Elle constitue
 * le c≈ìur logique du jeu en coordonnant tous les sous-syst√®mes.
 *
 * <p>Responsabilit√©s principales :</p>
 * <ul>
 *   <li>Coordination de tous les syst√®mes de jeu (bombes, power-ups, timer)</li>
 *   <li>Gestion du cycle de vie des joueurs (spawn, mort, √©limination)</li>
 *   <li>Validation des mouvements avec m√©caniques avanc√©es (pouss√©e de bombes)</li>
 *   <li>D√©tection des collisions et application des d√©g√¢ts</li>
 *   <li>V√©rification des conditions de victoire/d√©faite</li>
 *   <li>Int√©gration avec le syst√®me de profils et statistiques</li>
 * </ul>
 *
 * <p>Architecture des syst√®mes :</p>
 * <pre>
 * GameManager (Orchestrateur)
 * ‚îú‚îÄ‚îÄ List&lt;GamePlayer&gt; (Joueurs actifs)
 * ‚îú‚îÄ‚îÄ BombSystem (Bombes et explosions)
 * ‚îú‚îÄ‚îÄ PowerUpSystem (Bonus et collectibles)
 * ‚îú‚îÄ‚îÄ GameGrid (Terrain de jeu)
 * ‚îú‚îÄ‚îÄ GameTimer (Horloge de partie)
 * ‚îî‚îÄ‚îÄ PlayerProfileManager (Statistiques)
 * </pre>
 *
 * <p>Cycle de mise √† jour :</p>
 * <ol>
 *   <li>Mise √† jour du timer de partie</li>
 *   <li>Mise √† jour des √©tats des joueurs</li>
 *   <li>Mise √† jour du syst√®me de bombes</li>
 *   <li>Collecte des power-ups</li>
 *   <li>V√©rification des collisions d'explosion</li>
 *   <li>Contr√¥le des conditions de fin de partie</li>
 * </ol>
 *
 * <p>Positions de spawn par d√©faut :</p>
 * <ul>
 *   <li><strong>Joueur 1</strong> : (1, 1) - Coin haut-gauche</li>
 *   <li><strong>Joueur 2</strong> : (13, 11) - Coin bas-droite</li>
 *   <li><strong>Joueur 3</strong> : (13, 1) - Coin haut-droite</li>
 *   <li><strong>Joueur 4</strong> : (1, 11) - Coin bas-gauche</li>
 * </ul>
 *
 * @author BUT1_TD3_G35
 * @version 1.0
 * @since 1.0
 */
public class GameManager {

    /** Liste des joueurs actifs dans la partie */
    private List<GamePlayer> players;

    /** Syst√®me de gestion des bombes et explosions */
    private BombSystem bombSystem;

    /** Syst√®me de gestion des power-ups */
    private PowerUpSystem powerUpSystem;

    /** Grille de jeu repr√©sentant le terrain */
    private GameGrid grid;

    /** Timer de partie pour la gestion du temps */
    private GameTimer gameTimer;

    /** Instance du joueur IA (si mode IA activ√©) */
    private AIPlayer aiPlayer;

    /** Nombre de joueurs dans la partie (2-4) */
    private int playerCount;

    /** Indique si le mode IA est activ√© */
    private boolean aiMode;

    /** √âtat de fonctionnement de la partie */
    private boolean gameRunning;

    /**
     * Constructeur du gestionnaire de jeu.
     * Initialise tous les sous-syst√®mes et configure le nombre de joueurs.
     * Le nombre de joueurs est automatiquement contraint entre 2 et 4.
     *
     * @param playerCount Le nombre de joueurs souhait√© (sera contraint entre 2 et 4)
     */
    public GameManager(int playerCount) {
        this.playerCount = Math.max(2, Math.min(4, playerCount));
        this.aiMode = aiMode;
        this.players = new ArrayList<>();
        this.bombSystem = new BombSystem();
        this.powerUpSystem = new PowerUpSystem();
        this.gameTimer = new GameTimer();
        this.gameRunning = false;
    }

    /**
     * Initialise une nouvelle partie avec la grille sp√©cifi√©e.
     * Configure tous les syst√®mes, place les joueurs aux positions de spawn
     * et d√©marre le timer de partie.
     *
     * @param grid La grille de jeu √† utiliser pour cette partie
     */
    public void initializeGame(GameGrid grid) {
        this.grid = grid;
        initializePlayers();

        bombSystem.clear();
        powerUpSystem.clear();
        gameTimer.reset();
        gameRunning = true;
    }

    /**
     * Initialise les joueurs aux positions de spawn pr√©d√©finies.
     * Place les joueurs aux quatre coins de la carte selon un sch√©ma √©quilibr√©
     * qui garantit une distance maximale entre les adversaires.
     *
     * <p>Algorithme de placement :</p>
     * <ul>
     *   <li>Joueurs dispos√©s en diagonale pour √©quilibrage</li>
     *   <li>Positions √©loign√©es pour √©viter les confrontations imm√©diates</li>
     *   <li>Zones de spawn garanties libres par la g√©n√©ration de grille</li>
     * </ul>
     */
    private void initializePlayers() {
        players.clear();

        // Positions de spawn optimis√©es pour l'√©quilibrage
        int[][] spawnPositions = {
                {1, 1},     // Joueur 1 - Coin haut-gauche
                {13, 11},   // Joueur 2 - Coin bas-droite (diagonale)
                {13, 1},    // Joueur 3 - Coin haut-droite
                {1, 11}     // Joueur 4 - Coin bas-gauche (diagonale)
        };

        for (int i = 0; i < playerCount; i++) {
            int spawnX = spawnPositions[i][0];
            int spawnY = spawnPositions[i][1];
            players.add(new GamePlayer(i + 1, spawnX, spawnY));
        }
    }

    /**
     * Met √† jour l'√©tat complet du jeu pour une frame.
     * Orchestre la mise √† jour de tous les sous-syst√®mes dans l'ordre appropri√©
     * pour maintenir la coh√©rence du gameplay et d√©tecter les √©v√©nements importants.
     *
     * <p>S√©quence de mise √† jour :</p>
     * <ol>
     *   <li>Timer de partie (temps restant)</li>
     *   <li>√âtats des joueurs (mouvement, invincibilit√©)</li>
     *   <li>Syst√®me de bombes (timers, explosions)</li>
     *   <li>Collecte de power-ups</li>
     *   <li>Collisions avec explosions</li>
     *   <li>Conditions de fin de partie</li>
     * </ol>
     */
    public void update() {
        if (!gameRunning) return;

        gameTimer.update();

        // Mise √† jour des joueurs actifs
        for (GamePlayer player : players) {
            if (!player.getStats().isEliminated()) {
                player.update();
            }
        }

        // Mise √† jour des syst√®mes de jeu
        bombSystem.update(grid, powerUpSystem);
        updatePowerUpCollections();
        checkExplosionCollisions();
        checkGameEnd();
    }

    /**
     * G√®re la collecte des power-ups par les joueurs.
     * V√©rifie pour chaque joueur actif s'il se trouve sur un power-up
     * et applique les effets correspondants tout en supprimant le power-up collect√©.
     */
    private void updatePowerUpCollections() {
        for (GamePlayer player : players) {
            if (!player.getStats().isEliminated()) {
                int x = player.getPlayer().getX();
                int y = player.getPlayer().getY();
                PowerUpSystem.PowerUp powerUp = powerUpSystem.checkPowerUpCollection(x, y);
                if (powerUp != null) {
                    player.getStats().applyPowerUp(powerUp.getType());
                    System.out.println("Joueur " + player.getPlayerNumber() +
                            " a ramass√© un power-up: " + powerUp.getType().getLabel());
                }
            }
        }
    }

    /**
     * V√©rifie les collisions entre joueurs et explosions.
     * Contr√¥le si des joueurs actifs et vuln√©rables se trouvent sur des cases
     * d'explosion et d√©clenche la gestion des d√©g√¢ts appropri√©e.
     *
     * <p>Conditions de collision :</p>
     * <ul>
     *   <li>Joueur non √©limin√©</li>
     *   <li>Joueur non invincible (pas de period d'invincibilit√©)</li>
     *   <li>Position exactement sur une explosion active</li>
     * </ul>
     */
    private void checkExplosionCollisions() {
        for (GamePlayer player : players) {
            if (!player.getStats().isEliminated() && !player.getStats().isInvincible()) {
                int x = player.getPlayer().getX();
                int y = player.getPlayer().getY();
                if (bombSystem.checkExplosionCollision(x, y)) {
                    handlePlayerDeath(player);
                    return; // Sortir apr√®s la premi√®re mort pour √©viter les probl√®mes de concurrence
                }
            }
        }
    }

    /**
     * G√®re la mort d'un joueur suite √† une explosion.
     * Applique les d√©g√¢ts, v√©rifie l'√©limination et g√®re le respawn
     * avec periode d'invincibilit√© appropri√©e.
     *
     * @param player Le joueur qui a subi des d√©g√¢ts
     */
    private void handlePlayerDeath(GamePlayer player) {
        player.getStats().takeDamage();
        System.out.println("Joueur " + player.getPlayerNumber() + " mort! Vies restantes: " +
                player.getStats().getLives());

        if (player.getStats().isEliminated()) {
            System.out.println("üî• Joueur " + player.getPlayerNumber() + " √âLIMIN√â!");
        } else {
            player.respawn();
        }
    }

    /**
     * V√©rifie les conditions de fin de partie.
     * D√©termine s'il reste suffisamment de joueurs pour continuer
     * et d√©clenche les proc√©dures de fin appropri√©es (victoire ou match nul).
     *
     * <p>Conditions de fin :</p>
     * <ul>
     *   <li><strong>Victoire</strong> : Un seul joueur survivant</li>
     *   <li><strong>Match nul</strong> : Aucun joueur survivant</li>
     *   <li><strong>Continuation</strong> : 2+ joueurs survivants</li>
     * </ul>
     */
    private void checkGameEnd() {
        List<GamePlayer> alivePlayers = new ArrayList<>();

        for (GamePlayer player : players) {
            if (!player.getStats().isEliminated()) {
                alivePlayers.add(player);
            }
        }

        if (alivePlayers.size() <= 1) {
            gameRunning = false;
            if (alivePlayers.size() == 1) {
                handleGameWin(alivePlayers.get(0));
            } else {
                handleGameDraw();
            }
        }
    }

    /**
     * G√®re la victoire d'un joueur.
     * Met √† jour les statistiques du profil actuel si configur√©
     * et enregistre la partie gagn√©e pour le joueur 1.
     *
     * @param winner Le joueur gagnant
     */
    private void handleGameWin(GamePlayer winner) {
        // Mettre √† jour les profils de joueur si n√©cessaire
        PlayerProfileManager profileManager = PlayerProfileManager.getInstance();
        PlayerProfile profile = profileManager.getCurrentProfile();

        if (profile != null) {
            profile.incrementGamesPlayed();
            if (winner.getPlayerNumber() == 1) {
                profile.incrementGamesWon();
            }
            profileManager.saveProfiles();
        }

        System.out.println("Joueur " + winner.getPlayerNumber() + " gagne!");
    }

    /**
     * G√®re un match nul (aucun survivant).
     * Met √† jour les statistiques du profil avec une partie jou√©e
     * mais aucune victoire enregistr√©e.
     */
    private void handleGameDraw() {
        PlayerProfileManager profileManager = PlayerProfileManager.getInstance();
        PlayerProfile profile = profileManager.getCurrentProfile();

        if (profile != null) {
            profile.incrementGamesPlayed();
            profileManager.saveProfiles();
        }

        System.out.println("Match nul!");
    }

    /**
     * Valide si un joueur peut se d√©placer vers une position donn√©e.
     * Effectue une validation compl√®te incluant les limites de grille,
     * les obstacles, les bombes et les m√©caniques avanc√©es comme la pouss√©e.
     *
     * <p>Validations effectu√©es :</p>
     * <ol>
     *   <li><strong>√âtat joueur</strong> : V√©rification non-√©limin√©</li>
     *   <li><strong>Limites</strong> : Position dans les bornes de la grille</li>
     *   <li><strong>Terrain</strong> : Case praticable ou traversable avec capacit√©s</li>
     *   <li><strong>Bombes</strong> : Gestion pouss√©e ou blocage</li>
     *   <li><strong>Animations</strong> : √âvitement bombes en mouvement</li>
     * </ol>
     *
     * @param gamePlayer Le joueur qui souhaite se d√©placer
     * @param x Coordonn√©e X de destination
     * @param y Coordonn√©e Y de destination
     * @return true si le mouvement est autoris√©, false sinon
     */
    public boolean canPlayerMoveTo(GamePlayer gamePlayer, int x, int y) {
        if (gamePlayer.getStats().isEliminated()) return false;

        // V√©rifier les limites de la grille
        if (!grid.inBounds(x, y)) return false;

        // V√©rifier la praticabilit√© du terrain avec capacit√©s sp√©ciales
        boolean canPassWalls = gamePlayer.getStats().canPassWalls();
        if (!grid.isWalkable(x, y) && !(canPassWalls && grid.isDestructibleWall(x, y))) {
            return false;
        }

        // Gestion des bombes avec m√©caniques de pouss√©e
        if (bombSystem.hasBombAt(x, y)) {
            if (gamePlayer.getStats().canPushBombs() && !bombSystem.isBombMovingAt(x, y)) {
                // Calculer la direction de pouss√©e
                int currentX = gamePlayer.getPlayer().getX();
                int currentY = gamePlayer.getPlayer().getY();
                int dirX = x - currentX;
                int dirY = y - currentY;

                return bombSystem.tryPushBomb(x, y, dirX, dirY, grid, players);
            }
            return false;
        }

        // √âviter les bombes en cours d'animation
        if (bombSystem.isBombMovingAt(x, y)) {
            return false;
        }

        return true;
    }

    /**
     * Place une bombe pour un joueur √† sa position actuelle.
     * V√©rifie que le joueur est actif et utilise ses statistiques
     * pour d√©terminer la port√©e de la bombe.
     *
     * @param gamePlayer Le joueur qui place la bombe
     */
    public void placeBombForPlayer(GamePlayer gamePlayer) {
        if (gamePlayer.getStats().isEliminated()) return;

        int x = gamePlayer.getPlayer().getX();
        int y = gamePlayer.getPlayer().getY();
        int range = gamePlayer.getStats().getBombRange();

        bombSystem.placeBomb(x, y, range, grid);
    }

    /**
     * Red√©marre la partie actuelle.
     * Remet √† z√©ro tous les syst√®mes de jeu et replace les joueurs
     * √† leurs positions de spawn avec leurs statistiques initiales.
     */
    public void restartGame() {
        gameRunning = false;

        // R√©initialiser tous les syst√®mes
        bombSystem.clear();
        powerUpSystem.clear();
        gameTimer.reset();

        // R√©initialiser les joueurs
        for (GamePlayer player : players) {
            player.reset();
        }

        gameRunning = true;
    }

    /**
     * Retourne le texte du gagnant pour l'affichage.
     * Analyse l'√©tat actuel des joueurs pour d√©terminer
     * le r√©sultat de la partie.
     *
     * @return Le nom du joueur gagnant ou "Match nul"
     */
    public String getWinnerText() {
        List<GamePlayer> alivePlayers = new ArrayList<>();

        for (GamePlayer player : players) {
            if (!player.getStats().isEliminated()) {
                alivePlayers.add(player);
            }
        }

        if (alivePlayers.size() == 1) {
            return "Joueur " + alivePlayers.get(0).getPlayerNumber();
        } else {
            return "Match nul";
        }
    }

    // ==================== ACCESSEURS ====================

    /**
     * Retourne la liste des joueurs actifs.
     *
     * @return La liste des GamePlayer
     */
    public List<GamePlayer> getPlayers() { return players; }

    /**
     * Retourne le syst√®me de bombes.
     *
     * @return L'instance BombSystem
     */
    public BombSystem getBombSystem() { return bombSystem; }

    /**
     * Retourne le syst√®me de power-ups.
     *
     * @return L'instance PowerUpSystem
     */
    public PowerUpSystem getPowerUpSystem() { return powerUpSystem; }

    /**
     * Retourne la grille de jeu.
     *
     * @return L'instance GameGrid
     */
    public GameGrid getGrid() { return grid; }

    /**
     * Retourne le timer de partie.
     *
     * @return L'instance GameTimer
     */
    public GameTimer getGameTimer() { return gameTimer; }

    /**
     * Retourne l'instance du joueur IA.
     *
     * @return L'instance AIPlayer ou null si mode IA non activ√©
     */
    public AIPlayer getAiPlayer() { return aiPlayer; }

    /**
     * Retourne le nombre de joueurs dans la partie.
     *
     * @return Le nombre de joueurs (2-4)
     */
    public int getPlayerCount() { return playerCount; }

    /**
     * V√©rifie si le mode IA est activ√©.
     *
     * @return true si mode IA, false sinon
     */
    public boolean isAiMode() { return aiMode; }

    /**
     * V√©rifie si la partie est en cours.
     *
     * @return true si le jeu est actif, false sinon
     */
    public boolean isGameRunning() { return gameRunning; }

    // ==================== MODIFICATEURS ====================

    /**
     * D√©finit l'√©tat de fonctionnement de la partie.
     *
     * @param running true pour activer le jeu, false pour l'arr√™ter
     */
    public void setGameRunning(boolean running) { this.gameRunning = running; }
}